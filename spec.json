{
  "swagger": "2.0",
  "info": {
    "description": "Hello it me",
    "version": "1.0.0",
    "title": "Basement Community",
    "contact": { "email": "mmckenna.phila@gmail.com" },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "api.staging.basementcommunity.com",
  "basePath": "",
  "tags": [
    {
      "name": "account",
      "description": "CRUD operations for account"
    },
    {
      "name": "categories",
      "description": "CRUD operations for categories"
    },
    {
      "name": "forums",
      "description": "CRUD operations for forums"
    },
    {
      "name": "images",
      "description": "CRUD operations for images"
    },
    {
      "name": "mentions",
      "description": "CRUD operations for mentions"
    },
    {
      "name": "offenses",
      "description": "CRUD operations for offenses"
    },
    {
      "name": "posts",
      "description": "CRUD operations for posts"
    },
    {
      "name": "private messages",
      "description": "CRUD operations for private messages"
    },
    {
      "name": "profile",
      "description": "CRUD operations for profile"
    },
    {
      "name": "reports",
      "description": "CRUD operations for reports"
    },
    {
      "name": "threads",
      "description": "CRUD operations for threads"
    },
    {
      "name": "users",
      "description": "CRUD operations for users"
    }
  ],
  "schemes": ["https"],
  "paths": {
    "/account/settings": {
      "get": {
        "tags": ["account"],
        "summary": "List account settings",
        "description": "",
        "operationId": "listAccountSettings",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      },
      "put": {
        "tags": ["account"],
        "summary": "Update account settings",
        "description": "",
        "operationId": "updateAccountSettings",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account settings that can be updated",
            "required": true,
            "schema": { "$ref": "#/definitions/Account" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/categories": {
      "get": {
        "tags": ["categories"],
        "summary": "List categories",
        "description": "",
        "operationId": "listCategories",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        }
      },
      "post": {
        "tags": ["categories"],
        "summary": "Create a category",
        "description": "",
        "operationId": "createCategory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Category information",
            "required": true,
            "schema": { "$ref": "#/definitions/Category" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/categories/{category_id}": {
      "put": {
        "tags": ["categories"],
        "summary": "Update a category",
        "description": "",
        "operationId": "updateCategory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Category information",
            "required": true,
            "schema": { "$ref": "#/definitions/CategoryID" }
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "ID of the category to be updated",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      },
      "delete": {
        "tags": ["categories"],
        "summary": "Delete a category",
        "description": "",
        "operationId": "deleteCategory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "ID of the category to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/forums": {
      "get": {
        "tags": ["forums"],
        "summary": "List forums",
        "description": "",
        "operationId": "listForums",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        }
      },
      "post": {
        "tags": ["forums"],
        "summary": "Create a forum",
        "description": "",
        "operationId": "createForum",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Forum information",
            "required": true,
            "schema": { "$ref": "#/definitions/Forum" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/forums/{forum_id}": {
      "put": {
        "tags": ["forums"],
        "summary": "Update a forum",
        "description": "",
        "operationId": "updateForum",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Forum information",
            "required": true,
            "schema": { "$ref": "#/definitions/ForumID" }
          },
          {
            "name": "forum_id",
            "in": "path",
            "description": "ID of the forum to be updated",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      },
      "delete": {
        "tags": ["forums"],
        "summary": "Delete a forum",
        "description": "",
        "operationId": "deleteForum",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "forum_id",
            "in": "path",
            "description": "ID of the forum to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/mentions": {
      "get": {
        "tags": ["mentions"],
        "summary": "List mentions",
        "description": "",
        "operationId": "listMentions",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "unread_only",
            "in": "query",
            "description": "Only get unread mentions",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of mentions to get",
            "required": false,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "How many mentions to get per page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/mentions/{mention_id}/read": {
      "post": {
        "tags": ["mentions"],
        "summary": "Mark mention read",
        "description": "",
        "operationId": "markMentionRead",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "mention_id",
            "in": "path",
            "description": "ID of the mention to be marked read",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/offenses": {
      "get": {
        "tags": ["offenses"],
        "summary": "List offenses",
        "description": "",
        "operationId": "listOffenses",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "user_id",
            "in": "query",
            "description": "Offenses tied to a user ID",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of offenses to get",
            "required": false,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "How many offenses to get per page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      },
      "post": {
        "tags": ["offenses"],
        "summary": "Create an offense",
        "description": "",
        "operationId": "createOffense",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Offense information",
            "required": true,
            "schema": { "$ref": "#/definitions/Offense" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/offenses/{offense_id}": {
      "get": {
        "tags": ["offenses"],
        "summary": "View an offense",
        "description": "",
        "operationId": "viewOffense",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "offense_id",
            "in": "path",
            "description": "ID of the offense to be viewed",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      },
      "put": {
        "tags": ["offenses"],
        "summary": "Update an offense",
        "description": "",
        "operationId": "updateOffense",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Offense information",
            "required": true,
            "schema": { "$ref": "#/definitions/UpdateOffense" }
          },
          {
            "name": "offense_id",
            "in": "path",
            "description": "ID of the offense to be updated",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          },
          {
            "name": "action",
            "in": "query",
            "description": "Action to take on offense",
            "required": false,
            "type": "string",
            "enum": ["approve", "close"],
            "default": "approve"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      },
      "delete": {
        "tags": ["offenses"],
        "summary": "Delete an offense",
        "description": "",
        "operationId": "deleteOffense",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "offense_id",
            "in": "path",
            "description": "ID of the offense to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/offenses/own": {
      "get": {
        "tags": ["offenses"],
        "summary": "List my offenses",
        "description": "",
        "operationId": "viewMyOffenses",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "active_only",
            "in": "query",
            "description": "Offenses that are currently active",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of offenses to get",
            "required": false,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "How many offenses to get per page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/offenses/closed": {
      "get": {
        "tags": ["offenses"],
        "summary": "List closed offenses",
        "description": "",
        "operationId": "listClosedOffenses",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "pm_only",
            "in": "query",
            "description": "Offenses that are only tied to private messages",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "forum_id",
            "in": "query",
            "description": "Offenses that are tied to posts in a specific forum",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of offenses to get",
            "required": false,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "How many offenses to get per page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/offenses/pending": {
      "get": {
        "tags": ["offenses"],
        "summary": "List pending offenses",
        "description": "",
        "operationId": "listPendingOffenses",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "pm_only",
            "in": "query",
            "description": "Offenses that are only tied to private messages",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "forum_id",
            "in": "query",
            "description": "Offenses that are tied to posts in a specific forum",
            "required": false,
            "type": "integer"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Page of offenses to get",
            "required": false,
            "type": "integer"
          },
          {
            "name": "per_page",
            "in": "query",
            "description": "How many offenses to get per page",
            "required": false,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/APIError" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    }
  },
  "securityDefinitions": {
    "bearer-token": {
      "type": "http",
      "description": "Use the Oauth token thats valid for long durations",
      "scheme": "bearer"
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": { "type": "integer", "format": "int32" },
        "type": { "type": "string" },
        "message": { "type": "string" }
      }
    },
    "APIError": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "error": { "type": "string", "example": "Something went wrong." },
          "field": { "type": "string", "example": "email" }
        }
      },
      "collectionFormat": "multi"
    },
    "Account": {
      "type": "object",
      "required": [],
      "properties": {
        "dark_mode": { "type": "boolean", "example": true },
        "timezone": { "type": "string", "example": "America/New_York" }
      },
      "xml": { "name": "Account" }
    },
    "Category": {
      "type": "object",
      "required": ["title"],
      "properties": {
        "title": { "type": "string", "example": "General" },
        "description": { "type": "string", "example": "This category is for general forums" }
      },
      "xml": { "name": "Category" }
    },
    "CategoryID": {
      "type": "object",
      "required": [""],
      "properties": {
        "title": { "type": "string", "example": "General" },
        "description": { "type": "string", "example": "This category is for general forums" }
      },
      "xml": { "name": "CategoryID" }
    },
    "Forum": {
      "type": "object",
      "required": ["title", "category_id"],
      "properties": {
        "title": { "type": "string", "example": "Sports Forum" },
        "category_id": { "type": "integer", "format": "int32", "example": 12 },
        "description": { "type": "string", "example": "This forum is about sports" },
        "is_hidden": { "type": "boolean", "example": true },
        "mod_only": { "type": "boolean", "example": true },
        "parent_forum_id": { "type": "integer", "format": "int32", "example": 12 },
        "is_deleted": { "type": "boolean", "example": true },
        "icon_id": { "type": "integer", "format": "int32", "example": 12 }
      },
      "xml": { "name": "Forum" }
    },
    "ForumID": {
      "type": "object",
      "required": [],
      "properties": {
        "title": { "type": "string", "example": "Sports Forum" },
        "category_id": { "type": "integer", "format": "int32", "example": 12 },
        "description": { "type": "string", "example": "This forum is about sports" },
        "is_hidden": { "type": "boolean", "example": true },
        "mod_only": { "type": "boolean", "example": true },
        "parent_forum_id": { "type": "integer", "format": "int32", "example": 12 },
        "is_deleted": { "type": "boolean", "example": true },
        "icon_id": { "type": "integer", "format": "int32", "example": 12 }
      },
      "xml": { "name": "Forum" }
    },
    "Offense": {
      "type": "object",
      "required": ["reason"],
      "properties": {
        "reason": { "type": "string", "example": "This person acted really bad." },
        "is_ban": { "type": "boolean", "example": false },
        "exp_mins": { "type": "integer", "example": 32000 },
        "post_id": { "type": "integer", "format": "int32", "example": 12 },
        "private_message_post_id": { "type": "integer", "format": "int32", "example": 12 }
      },
      "xml": { "name": "Offense" }
    },
    "UpdateOffense": {
      "type": "object",
      "required": [],
      "properties": {
        "reason": { "type": "string", "example": "This person acted really bad." }
      },
      "xml": { "name": "Offense" }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
