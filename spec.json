{
  "swagger": "2.0",
  "info": {
    "description": "Hello it me",
    "version": "1.0.0",
    "title": "Basement Community",
    "contact": { "email": "mmckenna.phila@gmail.com" },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host": "api.staging.basementcommunity.com",
  "basePath": "",
  "tags": [
    {
      "name": "account",
      "description": "CRUD operations for account"
    },
    {
      "name": "categories",
      "description": "CRUD operations for categories"
    },
    {
      "name": "forums",
      "description": "CRUD operations for forums"
    },
    {
      "name": "images",
      "description": "CRUD operations for images"
    },
    {
      "name": "mentions",
      "description": "CRUD operations for mentions"
    },
    {
      "name": "offenses",
      "description": "CRUD operations for offenses"
    },
    {
      "name": "posts",
      "description": "CRUD operations for posts"
    },
    {
      "name": "private messages",
      "description": "CRUD operations for private messages"
    },
    {
      "name": "profile",
      "description": "CRUD operations for profile"
    },
    {
      "name": "reports",
      "description": "CRUD operations for reports"
    },
    {
      "name": "threads",
      "description": "CRUD operations for threads"
    },
    {
      "name": "users",
      "description": "CRUD operations for users"
    }
  ],
  "schemes": ["https"],
  "paths": {
    "/account/settings": {
      "get": {
        "tags": ["account"],
        "summary": "List account settings",
        "description": "",
        "operationId": "listAccountSettings",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        },
        "security": [{ "bearer-token": [] }]
      },
      "put": {
        "tags": ["account"],
        "summary": "Update account settings",
        "description": "",
        "operationId": "updateAccountSettings",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Account settings that can be updated",
            "required": true,
            "schema": { "$ref": "#/definitions/Account" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/categories": {
      "get": {
        "tags": ["categories"],
        "summary": "List categories",
        "description": "",
        "operationId": "listCategories",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        }
      },
      "post": {
        "tags": ["categories"],
        "summary": "Create a category",
        "description": "",
        "operationId": "createCategory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Category information",
            "required": true,
            "schema": { "$ref": "#/definitions/Category" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/categories/{category_id}": {
      "put": {
        "tags": ["categories"],
        "summary": "Update a category",
        "description": "",
        "operationId": "updateCategory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Category information",
            "required": true,
            "schema": { "$ref": "#/definitions/CategoryID" }
          },
          {
            "name": "category_id",
            "in": "path",
            "description": "ID of the category to be updated",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        },
        "security": [{ "bearer-token": [] }]
      },
      "delete": {
        "tags": ["categories"],
        "summary": "Delete a category",
        "description": "",
        "operationId": "deleteCategory",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "category_id",
            "in": "path",
            "description": "ID of the category to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/forums": {
      "get": {
        "tags": ["forums"],
        "summary": "List forums",
        "description": "",
        "operationId": "listForums",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        }
      },
      "post": {
        "tags": ["forums"],
        "summary": "Create a forum",
        "description": "",
        "operationId": "createForum",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Forum information",
            "required": true,
            "schema": { "$ref": "#/definitions/Forum" }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/forums/{forum_id}": {
      "put": {
        "tags": ["forums"],
        "summary": "Update a forum",
        "description": "",
        "operationId": "updateForum",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "description": "Forum information",
            "required": true,
            "schema": { "$ref": "#/definitions/ForumID" }
          },
          {
            "name": "forum_id",
            "in": "path",
            "description": "ID of the forum to be updated",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        },
        "security": [{ "bearer-token": [] }]
      },
      "delete": {
        "tags": ["forums"],
        "summary": "Delete a forum",
        "description": "",
        "operationId": "deleteForum",
        "consumes": ["application/json"],
        "produces": ["application/json"],
        "parameters": [
          {
            "name": "forum_id",
            "in": "path",
            "description": "ID of the forum to be deleted",
            "required": true,
            "type": "integer",
            "minimum": 1,
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          },
          "400": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/ApiResponse" }
          }
        },
        "security": [{ "bearer-token": [] }]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by status",
        "description": "Multiple status values can be provided with comma separated strings",
        "operationId": "findPetsByStatus",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "description": "Status values that need to be considered for filter",
            "required": true,
            "type": "array",
            "items": {
              "type": "string",
              "enum": ["available", "pending", "sold"],
              "default": "available"
            },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Pet" }
            }
          },
          "400": { "description": "Invalid status value" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": ["pet"],
        "summary": "Finds Pets by tags",
        "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
        "operationId": "findPetsByTags",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "tags",
            "in": "query",
            "description": "Tags to filter by",
            "required": true,
            "type": "array",
            "items": { "type": "string" },
            "collectionFormat": "multi"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": { "$ref": "#/definitions/Pet" }
            }
          },
          "400": { "description": "Invalid tag value" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }],
        "deprecated": true
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": ["pet"],
        "summary": "Find pet by ID",
        "description": "Returns a single pet",
        "operationId": "getPetById",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet to return",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": { "$ref": "#/definitions/Pet" }
          },
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" }
        },
        "security": [{ "api_key": [] }]
      },
      "post": {
        "tags": ["pet"],
        "summary": "Updates a pet in the store with form data",
        "description": "",
        "operationId": "updatePetWithForm",
        "consumes": ["application/x-www-form-urlencoded"],
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "description": "ID of pet that needs to be updated",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "formData",
            "description": "Updated name of the pet",
            "required": false,
            "type": "string"
          },
          {
            "name": "status",
            "in": "formData",
            "description": "Updated status of the pet",
            "required": false,
            "type": "string"
          }
        ],
        "responses": { "405": { "description": "Invalid input" } },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      },
      "delete": {
        "tags": ["pet"],
        "summary": "Deletes a pet",
        "description": "",
        "operationId": "deletePet",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "api_key",
            "in": "header",
            "required": false,
            "type": "string"
          },
          {
            "name": "petId",
            "in": "path",
            "description": "Pet id to delete",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "400": { "description": "Invalid ID supplied" },
          "404": { "description": "Pet not found" }
        },
        "security": [{ "petstore_auth": ["write:pets", "read:pets"] }]
      }
    },
    "/user/login": {
      "get": {
        "tags": ["user"],
        "summary": "Logs user into the system",
        "description": "",
        "operationId": "loginUser",
        "produces": ["application/json", "application/xml"],
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "type": "string"
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "headers": {
              "X-Expires-After": {
                "type": "string",
                "format": "date-time",
                "description": "date in UTC when token expires"
              },
              "X-Rate-Limit": {
                "type": "integer",
                "format": "int32",
                "description": "calls per hour allowed by the user"
              }
            },
            "schema": { "type": "string" }
          },
          "400": { "description": "Invalid username/password supplied" }
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer-token": {
      "type": "http",
      "description": "Use the Oauth token thats valid for long durations",
      "scheme": "bearer"
    }
  },
  "definitions": {
    "ApiResponse": {
      "type": "object",
      "properties": {
        "code": { "type": "integer", "format": "int32" },
        "type": { "type": "string" },
        "message": { "type": "string" }
      }
    },
    "Account": {
      "type": "object",
      "required": [],
      "properties": {
        "dark_mode": { "type": "boolean", "example": true },
        "timezone": { "type": "string", "example": "America/New_York" }
      },
      "xml": { "name": "Account" }
    },
    "Category": {
      "type": "object",
      "required": ["title"],
      "properties": {
        "title": { "type": "string", "example": "General" },
        "description": { "type": "string", "example": "This category is for general forums" }
      },
      "xml": { "name": "Category" }
    },
    "Forum": {
      "type": "object",
      "required": ["title", "category_id"],
      "properties": {
        "title": { "type": "string", "example": "Sports Forum" },
        "category_id": { "type": "integer", "format": "int32", "example": 12 },
        "description": { "type": "string", "example": "This forum is about sports" },
        "is_hidden": { "type": "boolean", "example": true },
        "mod_only": { "type": "boolean", "example": true },
        "parent_forum_id": { "type": "integer", "format": "int32", "example": 12 },
        "is_deleted": { "type": "boolean", "example": true },
        "icon_id": { "type": "integer", "format": "int32", "example": 12 }
      },
      "xml": { "name": "Forum" }
    },
    "ForumID": {
      "type": "object",
      "required": [],
      "properties": {
        "title": { "type": "string", "example": "Sports Forum" },
        "category_id": { "type": "integer", "format": "int32", "example": 12 },
        "description": { "type": "string", "example": "This forum is about sports" },
        "is_hidden": { "type": "boolean", "example": true },
        "mod_only": { "type": "boolean", "example": true },
        "parent_forum_id": { "type": "integer", "format": "int32", "example": 12 },
        "is_deleted": { "type": "boolean", "example": true },
        "icon_id": { "type": "integer", "format": "int32", "example": 12 }
      },
      "xml": { "name": "Forum" }
    },
    "CategoryID": {
      "type": "object",
      "required": [""],
      "properties": {
        "title": { "type": "string", "example": "General" },
        "description": { "type": "string", "example": "This category is for general forums" }
      },
      "xml": { "name": "Account" }
    },
    "Pet": {
      "type": "object",
      "required": ["name", "photoUrls"],
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "category": { "$ref": "#/definitions/Category" },
        "name": { "type": "string", "example": "doggie" },
        "photoUrls": {
          "type": "array",
          "xml": { "wrapped": true },
          "items": { "type": "string", "xml": { "name": "photoUrl" } }
        },
        "tags": {
          "type": "array",
          "xml": { "wrapped": true },
          "items": { "xml": { "name": "tag" }, "$ref": "#/definitions/Tag" }
        },
        "status": {
          "type": "string",
          "description": "pet status in the store",
          "enum": ["available", "pending", "sold"]
        }
      },
      "xml": { "name": "Pet" }
    },
    "Tag": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "name": { "type": "string" }
      },
      "xml": { "name": "Tag" }
    },
    "Order": {
      "type": "object",
      "properties": {
        "id": { "type": "integer", "format": "int64" },
        "petId": { "type": "integer", "format": "int64" },
        "quantity": { "type": "integer", "format": "int32" },
        "shipDate": { "type": "string", "format": "date-time" },
        "status": {
          "type": "string",
          "description": "Order Status",
          "enum": ["placed", "approved", "delivered"]
        },
        "complete": { "type": "boolean" }
      },
      "xml": { "name": "Order" }
    }
  },
  "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
  }
}
